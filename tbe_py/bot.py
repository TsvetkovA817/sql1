import threading
import random
import logging
import time
from telebot import types, TeleBot, custom_filters, util
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
from sqlalchemy import func
from datetime import datetime, timezone

from db_handler import CRUDOperations
from models import User, Phrase, UserWord, Lesson
from language_handler import LanguageHandler


class LanguageBot:
    def __init__(self, token, db_url):
        self.token = token
        self.db_url = db_url
        self.bot = None
        self.polling_thread = None
        self.is_running = False

        self.crud = CRUDOperations(db_url)
        self.known_users = []
        self.user_steps = {}
        self.current_buttons = []
        self.lang = LanguageHandler()
        # self.ui_lang = self.lang.current_lang
        self.Command = self._init_commands(ui_lang=self.lang.current_lang)

        #self.bot = TeleBot(token, state_storage=StateMemoryStorage())
        #self.setup_handlers()
        #self.bot.add_custom_filter(custom_filters.StateFilter(self.bot))

    def start_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.is_running:
            return "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω"

        self.bot = TeleBot(self.token, state_storage=StateMemoryStorage())
        self.setup_handlers()
        self.bot.add_custom_filter(custom_filters.StateFilter(self.bot))

        self.is_running = True
        self.polling_thread = threading.Thread(target=self._start_polling)
        self.polling_thread.start()

        return "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"

    def _start_polling(self):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        while self.is_running:
            try:
                self.bot.infinity_polling(skip_pending=True)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
                time.sleep(5)
                if self.is_running:
                    continue
                else:
                    break

    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞"""
        if not self.is_running:
            return "–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        try:
            if self.bot:
                self.bot.stop_polling()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ polling: {e}")


        if self.polling_thread and self.polling_thread.is_alive():
            self.polling_thread.join(timeout=5)

        self.is_running = False
        self.bot = None
        return "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    def get_bot_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç" if self.is_running else "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    class MyStates(StatesGroup):
        target_word = State()
        translate_word = State()
        another_words = State()
        select_lesson = State()
        select_target_language = State()
        select_ui_language = State()
        learning_mode = State()

    class Command:
        ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
        DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô'
        NEXT = '–î–∞–ª—å—à–µ ‚è≠'
        SELECT_LESSON = '–í—ã–±—Ä–∞—Ç—å —É—Ä–æ–∫ üìö'
        SELECT_TARGET_LANG = '–ò–∑–º–µ–Ω–∏—Ç—å –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫ üåê'
        SELECT_UI_LANG = '–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ üñ•Ô∏è'
        MAIN_MENU = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†'

    def _init_commands(self, ui_lang = 'ru'):
        """ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞ """
        cmd = self.Command
        cmd.ADD_WORD = f'{self.lang.get_text("bot_add_word",lang=ui_lang)} ‚ûï'
        cmd.DELETE_WORD = f'{self.lang.get_text("bot_delete_word",lang=ui_lang)} üîô'
        cmd.NEXT = f'{self.lang.get_text("bot_next",lang=ui_lang)} ‚è≠'
        cmd.SELECT_LESSON = f'{self.lang.get_text("bot_select_lesson",lang=ui_lang)} üìö'
        cmd.SELECT_TARGET_LANG = f'{self.lang.get_text("bot_select_target_lang",lang=ui_lang)} üåê'
        cmd.SELECT_UI_LANG = f'{self.lang.get_text("bot_select_ui_lang",lang=ui_lang)} üñ•Ô∏è'
        cmd.MAIN_MENU = f'{self.lang.get_text("bot_main_menu",lang=ui_lang)} üè†'
        return cmd

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        @self.bot.message_handler(commands=['start', 'menu'])
        def handle_start(message):
            self.show_main_menu(message)

        @self.bot.message_handler(func=lambda message: message.text == self.Command.NEXT)
        def handle_next(message):
            self.create_cards(message)

        @self.bot.message_handler(func=lambda message: message.text == self.Command.DELETE_WORD)
        def handle_delete_word(message):
            self.delete_word(message)

        @self.bot.message_handler(func=lambda message: message.text == self.Command.ADD_WORD)
        def handle_add_word(message):
            self.add_word(message)

        @self.bot.message_handler(func=lambda message: message.text == self.Command.SELECT_LESSON)
        def handle_select_lesson(message):
            self.select_lesson(message)

        @self.bot.message_handler(func=lambda message: message.text == self.Command.SELECT_TARGET_LANG)
        def handle_select_target_lang(message):
            self.select_target_language(message)

        @self.bot.message_handler(func=lambda message: message.text == self.Command.SELECT_UI_LANG)
        def handle_select_ui_lang(message):
            self.select_ui_language(message)

        @self.bot.message_handler(func=lambda message: message.text == self.Command.MAIN_MENU)
        def handle_main_menu(message):
            self.show_main_menu(message)

        @self.bot.message_handler(func=lambda message: True)
        def handle_message(message):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞
            if self.bot.get_state(message.from_user.id, message.chat.id) == self.MyStates.select_lesson:
                self.handle_lesson_selection(message)
                return
            # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ ...

            self.handle_user_response(message)

    def show_main_menu(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        cid = message.chat.id
        user_id = message.from_user.id
        lang = self.get_user_lang(user_id) # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        #self.ui_lang = lang
        commands = self._init_commands(ui_lang=lang) # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å –Ω—É–∂–Ω—ã–º —è–∑—ã–∫–æ–º

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
        markup = types.ReplyKeyboardMarkup(row_width=2)
        status = self.get_bot_status()

        buttons = [
            types.KeyboardButton(commands.SELECT_LESSON),
            types.KeyboardButton(commands.SELECT_TARGET_LANG),
            types.KeyboardButton(commands.SELECT_UI_LANG),
            types.KeyboardButton(commands.ADD_WORD),
            types.KeyboardButton(commands.NEXT)
        ]

        markup.add(*buttons)

        self.bot.send_message(
            message.chat.id,
            f"{status}\n{self.lang.get_text('bot_main_menu', lang=lang)}",
            reply_markup=markup
        )

        with self.crud.Session() as session:
            # –Ω–∞—à–ª–∏ —é–∑–µ—Ä–∞
            user = session.query(User).filter(User.telegram_id == str(cid)).first()
            # –Ω–µ –Ω–∞—à–ª–∏
            if not user:
                user = User(
                    telegram_id=str(cid),
                    username=message.from_user.username,
                    ui_language='ru',
                    target_language='en',
                    current_lesson_id=None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫
                )
                session.add(user)
                session.commit()
                #welcome_msg = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∏–∑—É—á–∞—Ç—å —è–∑—ã–∫–∏.\n –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                welcome_msg = f"{self.lang.get_text('bot_first_msg', lang=lang)}"
            else:
                welcome_msg = f"{self.lang.get_text('bot_welcome_msg', lang=lang)}"

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ
            current_lesson = None
            if user.current_lesson_id:
                current_lesson = session.query(Lesson).filter(Lesson.id == user.current_lesson_id).first()

            word_count = session.query(UserWord).filter(UserWord.user_id == user.id).count()
            welcome_msg += f"\n\n{self.lang.get_text('bot_user_dict', lang=lang)} {word_count} {self.lang.get_text('words', lang=lang)}"
            welcome_msg += f"\n{self.lang.get_text('target_language', lang=lang)} {user.target_language}"
            if current_lesson:
                welcome_msg += f"\n{self.lang.get_text('current_lesson', lang=lang)} {current_lesson.title}"
            else:
                welcome_msg += f"\n{self.lang.get_text('no_lesson_selected', lang=lang)}"
            # –æ—Ç—Å—ã–ª–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.send_message(
                cid,
                welcome_msg,
                reply_markup=markup
            )

    def select_lesson(self, message):
        cid = message.chat.id
        user_id = message.from_user.id
        lang = self.get_user_lang(user_id)

        with self.crud.Session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = session.query(User).filter(User.telegram_id == str(cid)).first()
            if not user:
                self.show_main_menu(message)
                return

            lessons = session.query(Lesson).all()

            if not lessons:
                self.bot.send_message(
                    cid,
                    f"{self.lang.get_text('no_lessons_available', lang=lang)}",
                    reply_markup=self.get_main_menu_markup()
                )
                return

            markup = types.ReplyKeyboardMarkup(row_width=1)
            for lesson in lessons:
                # –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–∫
                if user.current_lesson_id == lesson.id:
                    btn_text = f"‚úì {lesson.id}: {lesson.title}"
                else:
                    btn_text = f"{lesson.id}: {lesson.title}"
                markup.add(types.KeyboardButton(btn_text))
            markup.add(types.KeyboardButton(self.Command.MAIN_MENU))

            self.bot.send_message(
                cid,
                f"{self.lang.get_text('select_lesson_prompt', lang=lang)}",
                reply_markup=markup
            )
            self.bot.set_state(message.from_user.id, self.MyStates.select_lesson, message.chat.id)

    def handle_lesson_selection(self, message):
        cid = message.chat.id
        user_id = message.from_user.id
        lang = self.get_user_lang(user_id)
        text = message.text

        if text == self.Command.MAIN_MENU:
            self.show_main_menu(message)
            return

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —É—Ä–æ–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç "ID: –ù–∞–∑–≤–∞–Ω–∏–µ")
            lesson_id = int(text.split(':')[0].replace('‚úì', '').strip())

            with self.crud.Session() as session:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = session.query(User).filter(User.telegram_id == str(cid)).first()
                if user:
                    user.current_lesson_id = lesson_id
                    session.commit()

                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    lesson = session.query(Lesson).filter(Lesson.id == lesson_id).first()
                    lesson_title = lesson.title if lesson else f"{self.lang.get_text('unknown_lesson', lang=lang)}"

                    self.bot.send_message(
                        cid,
                        f"{self.lang.get_text('lesson_selected', lang=lang)} {lesson_title}",
                        reply_markup=self.get_main_menu_markup()
                    )
                else:
                    self.bot.send_message(
                        cid,
                        f"{self.lang.get_text('user_not_found', lang=lang)}",
                        reply_markup=self.get_main_menu_markup()
                    )
        except ValueError:
            self.bot.send_message(
                cid,
                f"{self.lang.get_text('select_lesson_from_list', lang=lang)}",
                reply_markup=self.get_main_menu_markup()
            )

    def create_cards(self, message):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞"""
        cid = message.chat.id
        user_id = message.from_user.id
        lang = self.get_user_lang(user_id)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        self.bot.set_state(user_id, self.MyStates.learning_mode, cid)

        with self.crud.Session() as session:
            user = session.query(User).filter(User.telegram_id == str(cid)).first()
            if not user:
                self.show_main_menu(message)
                return

            # user_words = session.query(UserWord).filter(UserWord.user_id == user.id).all()
            #
            # if not user_words:
            #     self.bot.send_message(
            #         cid,
            #         "–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –≤—Ä—É—á–Ω—É—é.",
            #         reply_markup=self.get_main_menu_markup()
            #     )
            #     return

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞
            if user.current_lesson_id:
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_words = session.query(UserWord) \
                    .join(Phrase, UserWord.phrase_id == Phrase.id) \
                    .filter(
                    UserWord.user_id == user.id,
                    Phrase.lesson_id == user.current_lesson_id
                ) \
                    .all()

                if not user_words:
                    self.bot.send_message(
                        cid,
                        f"{self.lang.get_text('no_words_in_lesson', lang=lang)}",
                        reply_markup=self.get_main_menu_markup()
                    )
                    return
            else:
                # –ë–µ—Ä–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É—Ä–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω
                user_words = session.query(UserWord) \
                    .filter(UserWord.user_id == user.id) \
                    .all()

                if not user_words:
                    self.bot.send_message(
                        cid,
                        f"{self.lang.get_text('empty_dictionary', lang=lang)}",
                        reply_markup=self.get_main_menu_markup()
                    )
                    return

            word_to_learn = random.choice(user_words)
            phrase = session.query(Phrase).filter(Phrase.id == word_to_learn.phrase_id).first()

            translate = getattr(phrase, f"text_{user.ui_language}")
            target_word = getattr(phrase, f"text_{user.target_language}")

            # other_phrases = session.query(Phrase) \
            #     .filter(Phrase.id != phrase.id) \
            #     .order_by(func.random()) \
            #     .limit(3) \
            #     .all()

            # –ü–æ–ª—É—á–∞–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ —Ç–æ–≥–æ –∂–µ –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤
            other_words = random.sample(
                [uw for uw in user_words if uw.phrase_id != phrase.id],
                min(3, len(user_words) - 1)
            )
            other_phrases = session.query(Phrase) \
                .filter(Phrase.id.in_([uw.phrase_id for uw in other_words])) \
                .all()

            others = [getattr(p, f"text_{user.target_language}") for p in other_phrases]

        markup = types.ReplyKeyboardMarkup(row_width=2)
        buttons = [types.KeyboardButton(target_word)]
        buttons.extend([types.KeyboardButton(word) for word in others])
        random.shuffle(buttons)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        # TODO: –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫–∏
        buttons.extend([
            types.KeyboardButton(self.Command.NEXT),
            types.KeyboardButton(self.Command.ADD_WORD),
            types.KeyboardButton(self.Command.DELETE_WORD),
            types.KeyboardButton(self.Command.MAIN_MENU)
        ])

        markup.add(*buttons)

        with self.bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['target_word'] = target_word
            data['translate_word'] = translate
            data['other_words'] = others
            data['phrase_id'] = phrase.id
            data['user_id'] = user.id  #  ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        self.bot.send_message(
            cid,
            f"{self.lang.get_text('select_translation')}\n{translate}",
            reply_markup=markup
        )


    def get_main_menu_markup(self):
        markup = types.ReplyKeyboardMarkup(row_width=2)
        # TODO: –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫–∏
        buttons = [
            types.KeyboardButton(self.Command.SELECT_LESSON),
            types.KeyboardButton(self.Command.SELECT_TARGET_LANG),
            types.KeyboardButton(self.Command.SELECT_UI_LANG),
            types.KeyboardButton(self.Command.ADD_WORD),
            types.KeyboardButton(self.Command.NEXT)
        ]
        markup.add(*buttons)
        return markup

    # def select_lesson(self, message):
    #     cid = message.chat.id
    #
    #     with self.crud.Session() as session:
    #         lessons = session.query(Lesson).all()
    #
    #         if not lessons:
    #             self.bot.send_message(
    #                 cid,
    #                 "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.",
    #                 reply_markup=self.get_main_menu_markup()
    #             )
    #             return
    #
    #         markup = types.ReplyKeyboardMarkup(row_width=1)
    #         for lesson in lessons:
    #             markup.add(types.KeyboardButton(f"{lesson.id}: {lesson.title}"))
    #         markup.add(types.KeyboardButton(self.Command.MAIN_MENU))
    #
    #         self.bot.send_message(
    #             cid,
    #             "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:",
    #             reply_markup=markup
    #         )
    #         self.bot.set_state(message.from_user.id, self.MyStates.select_lesson, message.chat.id)

    def select_target_language(self, message):
        cid = message.chat.id
        markup = types.ReplyKeyboardMarkup(row_width=2)

        buttons = [
            types.KeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß"),
            types.KeyboardButton("–ö–∏—Ç–∞–π—Å–∫–∏–π üá®üá≥"),
            types.KeyboardButton(self.Command.MAIN_MENU)
        ]
        markup.add(*buttons)

        self.bot.send_message(
            cid,
            f"{self.lang.get_text('select_target_language')}",
            reply_markup=markup
        )
        self.bot.set_state(message.from_user.id, self.MyStates.select_target_language, message.chat.id)

    def select_ui_language(self, message):
        cid = message.chat.id
        markup = types.ReplyKeyboardMarkup(row_width=2)

        buttons = [
            types.KeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫"),
            types.KeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß"),
            types.KeyboardButton("–ö–∏—Ç–∞–π—Å–∫–∏–π üá®üá≥"),
            types.KeyboardButton(self.Command.MAIN_MENU)
        ]
        markup.add(*buttons)

        self.bot.send_message(
            cid,
            f"{self.lang.get_text('select_ui_language')}",
            reply_markup=markup
        )
        self.bot.set_state(message.from_user.id, self.MyStates.select_ui_language, message.chat.id)

    def add_word(self, message):
        cid = message.chat.id

        with self.crud.Session() as session:
            user = session.query(User).filter(User.telegram_id == str(cid)).first()

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_phrase_ids = [uw.phrase_id for uw in session.query(UserWord)
                .filter(UserWord.user_id == user.id).all()]

            phrase = session.query(Phrase) \
                .filter(~Phrase.id.in_(user_phrase_ids)) \
                .order_by(func.random()) \
                .first()

            if not phrase:
                self.bot.send_message(
                    cid,
                    f"{self.lang.get_text('all_words_added')}",
                    reply_markup=self.get_main_menu_markup()
                )
                return

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_word = UserWord(
                user_id=user.id,
                phrase_id=phrase.id,
                last_review=datetime.now(timezone.utc)
            )
            session.add(user_word)
            session.commit()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
            word = getattr(phrase, f"text_{user.ui_language}")
            self.bot.send_message(
                cid,
                f"{self.lang.get_text('new_word_added')} {word}",
                reply_markup=self.get_main_menu_markup()
            )

    def delete_word(self, message):
        cid = message.chat.id

        with self.bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            if 'phrase_id' not in data:
                self.bot.send_message(
                    cid,
                    f"{self.lang.get_text('word_not_found')}",
                    reply_markup=self.get_main_menu_markup()
                )
                return

            with self.crud.Session() as session:
                user = session.query(User).filter(User.telegram_id == str(cid)).first()
                session.query(UserWord) \
                    .filter(UserWord.user_id == user.id, UserWord.phrase_id == data['phrase_id']) \
                    .delete()
                session.commit()

                self.bot.send_message(
                    cid,
                    f"{self.lang.get_text('word_deleted')}",
                    reply_markup=self.get_main_menu_markup()
                )

    def handle_user_response(self, message):
        cid = message.chat.id
        user_id = message.from_user.id
        text = message.text

        current_state = self.bot.get_state(message.from_user.id, message.chat.id)
        print(f"Current state: {current_state}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞
        if current_state == self.MyStates.select_lesson.name:
            if text == self.Command.MAIN_MENU:
                self.show_main_menu(message)
                return

            try:
                lesson_id = int(text.split(':')[0])
                with self.crud.Session() as session:
                    user = session.query(User).filter(User.telegram_id == str(cid)).first()
                    lesson = session.query(Lesson).filter(Lesson.id == lesson_id).first()

                    if lesson:
                        phrases = session.query(Phrase).filter(Phrase.lesson_id == lesson_id).all()
                        added = 0
                        for phrase in phrases:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ —Å–ª–æ–≤–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            exists = session.query(UserWord) \
                                .filter(UserWord.user_id == user.id, UserWord.phrase_id == phrase.id) \
                                .first()
                            if not exists:
                                user_word = UserWord(
                                    user_id=user.id,
                                    phrase_id=phrase.id,
                                    last_review=datetime.now(timezone.utc)
                                )
                                session.add(user_word)
                                added += 1

                        session.commit()
                        self.bot.send_message(
                            cid,
                            f"{self.lang.get_text('added_count')} {added} \
                                {self.lang.get_text('words_from_lesson')} '{lesson.title}'",
                            reply_markup=self.get_main_menu_markup()
                        )
                    else:
                        self.bot.send_message(
                            cid,
                            f"{self.lang.get_text('lesson_not_found')}",
                            reply_markup=self.get_main_menu_markup()
                        )
            except ValueError:
                self.bot.send_message(
                    cid,
                    f"{self.lang.get_text('select_lesson_from_list')}",
                    reply_markup=self.get_main_menu_markup()
                )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞
        elif current_state == self.MyStates.select_target_language.name:
            if text == self.Command.MAIN_MENU:
                self.show_main_menu(message)
                return

            lang_map = {
                "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß": "en",
                "–ö–∏—Ç–∞–π—Å–∫–∏–π üá®üá≥": "zh"
            }

            if text in lang_map:
                with self.crud.Session() as session:
                    user = session.query(User).filter(User.telegram_id == str(cid)).first()
                    user.target_language = lang_map[text]
                    session.commit()

                    self.bot.send_message(
                        cid,
                        f"{self.lang.get_text('now_learning')} {text}",
                        reply_markup=self.get_main_menu_markup()
                    )
            else:
                self.bot.send_message(
                    cid,
                    f"{self.lang.get_text('select_lesson_from_list')}",
                    reply_markup=self.get_main_menu_markup()
                )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        elif current_state == self.MyStates.select_ui_language.name:
            if text == self.Command.MAIN_MENU:
                self.show_main_menu(message)
                return

            lang_map = {
                "–†—É—Å—Å–∫–∏–π üá∑üá∫": "ru",
                "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß": "en",
                "–ö–∏—Ç–∞–π—Å–∫–∏–π üá®üá≥": "zh"
            }

            if text in lang_map:
                with self.crud.Session() as session:
                    user = session.query(User).filter(User.telegram_id == str(cid)).first()
                    user.ui_language = lang_map[text]
                    session.commit()

                    user_id = message.from_user.id
                    lang = self.get_user_lang(user_id)
                    self.ui_lang = lang
                    self.Command = self._init_commands()
                    self.show_main_menu(message)
                    self.bot.send_message(
                        cid,
                        f"–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {text}",
                        reply_markup=self.get_main_menu_markup()
                    )
            else:
                self.bot.send_message(
                    cid,
                    f"{self.lang.get_text('select_lesson_from_list')}",
                    reply_markup=self.get_main_menu_markup()
                )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
        if current_state != self.MyStates.learning_mode.name:
            self.show_main_menu(message)
            return
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        with self.bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            if not data:
                self.bot.send_message(cid, "–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ")
                self.create_cards(message)
                return
            if 'target_word' not in data:
                self.show_main_menu(message)
                return

            target_word = data['target_word']
            markup = types.ReplyKeyboardMarkup(row_width=2)

            if text == target_word:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞
                with self.crud.Session() as session:
                    user = session.query(User).filter(User.telegram_id == str(cid)).first()
                    user_word = session.query(UserWord) \
                        .filter(UserWord.user_id == user.id, UserWord.phrase_id == data['phrase_id']) \
                        .first()

                    if user_word:
                        user_word.repetition_count += 1
                        user_word.last_review = datetime.now(timezone.utc)
                        session.commit()

                hint = f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ\n{target_word} -> {data['translate_word']}"
                buttons = [
                    types.KeyboardButton(self.Command.NEXT),
                    types.KeyboardButton(self.Command.ADD_WORD),
                    types.KeyboardButton(self.Command.DELETE_WORD),
                    types.KeyboardButton(self.Command.MAIN_MENU)
                ]
            else:
                hint = f"–ù–µ–≤–µ—Ä–Ω–æ! ‚ùå\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {data['translate_word']} -> {target_word}"
                buttons = [
                    types.KeyboardButton(self.Command.NEXT),
                    types.KeyboardButton(self.Command.MAIN_MENU)
                ]

            markup.add(*buttons)
            self.bot.send_message(cid, hint, reply_markup=markup)

    def get_user_lang(self, user_id):
        """–ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
        with self.crud.Session() as session:
            user = session.query(User).filter(User.telegram_id == str(user_id)).first()
            return user.ui_language if user else 'ru'


    def run(self):
        print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
        self.bot.infinity_polling(skip_pending=True)

# —Ç–µ—Å—Ç
if __name__ == '__main__':
    TOKEN = '****'
    DB_URL = 'postgresql://postgres:****@localhost/lfl'

    bot = LanguageBot(TOKEN, DB_URL)
    #bot.run()
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print(bot.start_bot())

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    print(bot.get_bot_status())

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
    #time.sleep(60)
    #print(bot.stop_bot())