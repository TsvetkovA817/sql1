import threading
import random
import logging
import time
from telebot import types, TeleBot, custom_filters, util
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
from sqlalchemy import func
from datetime import datetime, timezone
from typing import Optional, Dict, List, Union, Tuple

from db_handler import CRUDOperations
from models import User, Phrase, UserWord, Lesson
from language_handler import LanguageHandler

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class LanguageBot:
    def __init__(self, token: str, db_url: str):
        self.token = token
        self.db_url = db_url
        self.bot: Optional[TeleBot] = None
        self.polling_thread: Optional[threading.Thread] = None
        self.is_running = False
        self.shutdown_event = threading.Event()
        # self.crud = CRUDOperations(db_url)
        self.known_users = []
        self.user_steps = {}
        self.current_buttons = []
        try:
            self.crud = CRUDOperations(db_url)
            self.lang = LanguageHandler()
            self.Command = self._init_commands(ui_lang=self.lang.current_lang)  # –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.user_cache: Dict[int, Dict] = {}  # –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            logger.info("LanguageBot –ó–∞–ø—É—Å—Ç–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"LanguageBot –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            raise

        # self.bot = TeleBot(token, state_storage=StateMemoryStorage())
        # self.setup_handlers()
        # self.bot.add_custom_filter(custom_filters.StateFilter(self.bot))

    class MyStates(StatesGroup):
        target_word = State()
        translate_word = State()
        another_words = State()
        select_lesson = State()
        select_target_language = State()
        select_ui_language = State()
        learning_mode = State()

    def start_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.is_running:
            msg1 = "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
            logger.warning(msg1)
            return msg1
        msg2 = '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω'
        try:
            self.bot = TeleBot(self.token, state_storage=StateMemoryStorage())
            self.setup_handlers()
            self.bot.add_custom_filter(custom_filters.StateFilter(self.bot))

            self.is_running = True
            self.shutdown_event.clear()
            self.polling_thread = threading.Thread(target=self._start_polling)
            self.polling_thread.start()
            logger.info(msg2)
            return msg2
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞: {str(e)}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞: {str(e)}"

    def _start_polling(self):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        while self.is_running:
            try:
                self.bot.infinity_polling(skip_pending=True)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
                time.sleep(5)
                if self.is_running:
                    continue
                else:
                    break

    def stop_bot(self) -> str:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞"""
        msg_bot_stopped = '–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        msg_bot_ok_stopped = '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        if not self.is_running:
            logger.warning(msg_bot_stopped)
            return msg_bot_stopped
        try:
            self.is_running = False
            self.shutdown_event.set()
            if self.bot:
                try:
                    self.bot.stop_polling()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–æ–ø –±–æ—Ç polling: {str(e)}")
            if self.polling_thread and self.polling_thread.is_alive():
                self.polling_thread.join(timeout=5)
            self.bot = None
            logger.info(msg_bot_ok_stopped)
            return msg_bot_ok_stopped
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {str(e)}")
            return f"–û—à–∏–±–∫–∞: {str(e)}"

    def get_bot_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç" if self.is_running else "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    class Command:
        ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
        DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô'
        NEXT = '–î–∞–ª—å—à–µ ‚è≠'
        SELECT_LESSON = '–í—ã–±—Ä–∞—Ç—å —É—Ä–æ–∫ üìö'
        SELECT_TARGET_LANG = '–ò–∑–º–µ–Ω–∏—Ç—å –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫ üåê'
        SELECT_UI_LANG = '–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ üñ•Ô∏è'
        MAIN_MENU = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†'

    def _init_commands(self, ui_lang='ru'):
        """ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞ """
        cmd = self.Command
        cmd.ADD_WORD = f'{self.lang.get_text("bot_add_word", lang=ui_lang)} ‚ûï'
        cmd.DELETE_WORD = f'{self.lang.get_text("bot_delete_word", lang=ui_lang)} üîô'
        cmd.NEXT = f'{self.lang.get_text("bot_next", lang=ui_lang)} ‚è≠'
        cmd.SELECT_LESSON = f'{self.lang.get_text("bot_select_lesson", lang=ui_lang)} üìö'
        cmd.SELECT_TARGET_LANG = f'{self.lang.get_text("bot_select_target_lang", lang=ui_lang)} üåê'
        cmd.SELECT_UI_LANG = f'{self.lang.get_text("bot_select_ui_lang", lang=ui_lang)} üñ•Ô∏è'
        cmd.MAIN_MENU = f'{self.lang.get_text("bot_main_menu", lang=ui_lang)} üè†'
        return cmd

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""

        @self.bot.message_handler(commands=['start', 'menu', 'help'])
        def handle_start(message: types.Message) -> None:
            try:
                self.show_main_menu(message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
                self._send_error_message(message.chat.id)

        @self.bot.message_handler(func=lambda message: message.text == self.Command.NEXT)
        def handle_next(message: types.Message) -> None:
            try:
                # self.create_cards(message)
                self.create_learning_card(message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
                self._send_error_message(message.chat.id)

        @self.bot.message_handler(func=lambda message: message.text == self.Command.DELETE_WORD)
        def handle_delete_word(message):
            self.delete_word(message)

        @self.bot.message_handler(func=lambda message: message.text == self.Command.ADD_WORD)
        def handle_add_word(message):
            self.add_word(message)

        @self.bot.message_handler(func=lambda message: message.text == self.Command.SELECT_LESSON)
        def handle_select_lesson(message):
            self.select_lesson(message)

        @self.bot.message_handler(func=lambda message: message.text == self.Command.SELECT_TARGET_LANG)
        def handle_select_target_lang(message):
            self.select_target_language(message)

        @self.bot.message_handler(func=lambda message: message.text == self.Command.SELECT_UI_LANG)
        def handle_select_ui_lang(message):
            self.select_ui_language(message)

        @self.bot.message_handler(func=lambda message: message.text == self.Command.MAIN_MENU)
        def handle_main_menu(message):
            self.show_main_menu(message)

        @self.bot.message_handler(func=lambda message: True)
        def handle_message(message):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞
            if self.bot.get_state(message.from_user.id, message.chat.id) == self.MyStates.select_lesson:
                self.handle_lesson_selection(message)
                return
            # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ ...

            self.handle_user_response(message)

    def show_main_menu(self, message: types.Message) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            user_id = message.from_user.id
            chat_id = message.chat.id

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ CRUDOperations
            user, error = self.crud.get_or_create_user(
                telegram_id=str(user_id),
                username=message.from_user.username,
                ui_language='ru',
                target_language='en'
            )

            if error or not user:
                self._send_error_message(chat_id)
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_cache[user_id] = {
                'ui_language': user.ui_language,
                'target_language': user.target_language,
                'current_lesson_id': user.current_lesson_id
            }

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ CRUDOperations
            stats, error = self.crud.get_user_stats(user.id)
            if error:
                stats = {'word_count': 0, 'learned_words': 0}

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_msg = self._format_welcome_message(user, stats)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
            self.bot.send_message(
                chat_id,
                welcome_msg,
                reply_markup=self._get_main_menu_markup(user.ui_language)
            )
        except Exception as e:
            logger.error(f"Error in show_main_menu: {str(e)}")
            self._send_error_message(message.chat.id)

    def create_learning_card(self, message: types.Message, chat_id: int = 0, user_id: int = 0) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤"""
        try:
            user_id = message.from_user.id
            chat_id = message.chat.id
            lang = self._get_user_lang_from_cache(user_id) or 'ru'

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user, error = self.crud.get_user_by_telegram_id(str(user_id))
            if error or not user:
                self._send_error_message(chat_id)
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            learning_data, error = self.crud.get_learning_data(
                user_id=user.id,
                lesson_id=user.current_lesson_id
            )

            if error or not learning_data:
                error_msg = self.lang.get_text(
                    'no_words_to_learn' if not learning_data else 'database_error',
                    lang=lang
                )
                self.bot.send_message(chat_id, error_msg)
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
            current_phrase = learning_data['current_phrase']
            other_phrases = learning_data['other_phrases']

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            card_data = {
                'target_word': current_phrase[f"text_{user.target_language}"],
                'translate_word': current_phrase[f"text_{user.ui_language}"],
                'other_words': [p[f"text_{user.target_language}"] for p in other_phrases],
                'phrase_id': current_phrase['id'],
                'user_id': user.id
            }

            # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            answer_buttons = self._generate_answer_options(
                card_data['target_word'],
                card_data['other_words']
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            commands = self._init_commands(ui_lang=lang)
            action_buttons = [
                types.KeyboardButton(commands.NEXT),
                types.KeyboardButton(commands.ADD_WORD),
                types.KeyboardButton(commands.DELETE_WORD),
                types.KeyboardButton(commands.MAIN_MENU)
            ]

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = self._create_learning_markup(
                answer_buttons + action_buttons,
                row_width=2
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            with self.bot.retrieve_data(user_id, chat_id) as data:
                data.update(card_data)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
            self.bot.set_state(user_id, self.MyStates.learning_mode, chat_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            self.bot.send_message(
                chat_id,
                f"{self.lang.get_text('select_translation', lang=lang)}\n{card_data['translate_word']}",
                reply_markup=markup
            )

        except Exception as e:
            logger.error(f"Error in create_learning_card: {str(e)}")
            self._send_error_message(message.chat.id)

    def select_lesson(self, message):
        cid = message.chat.id
        user_id = message.from_user.id
        lang = self.get_user_lang(user_id)

        with self.crud.Session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = session.query(User).filter(User.telegram_id == str(cid)).first()
            if not user:
                self.show_main_menu(message)
                return

            lessons = session.query(Lesson).all()

            if not lessons:
                self.bot.send_message(
                    cid,
                    f"{self.lang.get_text('no_lessons_available', lang=lang)}",
                    reply_markup=self.get_main_menu_markup()
                )
                return

            markup = types.ReplyKeyboardMarkup(row_width=1)
            for lesson in lessons:
                # –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–∫
                if user.current_lesson_id == lesson.id:
                    btn_text = f"‚úì {lesson.id}: {lesson.title}"
                else:
                    btn_text = f"{lesson.id}: {lesson.title}"
                markup.add(types.KeyboardButton(btn_text))
            markup.add(types.KeyboardButton(self.Command.MAIN_MENU))

            self.bot.send_message(
                cid,
                f"{self.lang.get_text('select_lesson_prompt', lang=lang)}",
                reply_markup=markup
            )
            self.bot.set_state(message.from_user.id, self.MyStates.select_lesson, message.chat.id)

    def handle_lesson_selection(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Ä–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            user_id = message.from_user.id
            chat_id = message.chat.id
            lang = self._get_user_lang_from_cache(user_id) or 'ru'
            uid = self.crud.get_user_by_telegram_id(str(user_id))

            if message.text == self.Command.MAIN_MENU:
                self.show_main_menu(message)
                return

            try:
                lesson_id = int(message.text.split(':')[0].replace('‚úì', '').strip())
            except (ValueError, IndexError):
                error_msg = self.lang.get_text('invalid_lesson_format', lang=lang)
                self.bot.send_message(chat_id, error_msg)
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–∫ —á–µ—Ä–µ–∑ CRUDOperations
            result, error = self.crud.update_user_lesson(
                telegram_id=str(user_id),
                lesson_id=lesson_id
            )

            if error:
                error_msg = self.lang.get_text('db_error', lang=lang) + f": {error}"
                self.bot.send_message(chat_id, error_msg)
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            if user_id in self.user_cache:
                self.user_cache[user_id]['current_lesson_id'] = lesson_id

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            success_msg = (
                f"{self.lang.get_text('lesson_selected', lang=lang)}: "
                f"{result.get('lesson_title', 'Unknown')}"
            )
            self.bot.send_message(chat_id, success_msg)

        except Exception as e:
            logger.error(f"Error in handle_lesson_selection: {str(e)}")
            self._send_error_message(message.from_user.id)

    def get_main_menu_markup(self):
        markup = types.ReplyKeyboardMarkup(row_width=2)
        buttons = [
            types.KeyboardButton(self.Command.SELECT_LESSON),
            types.KeyboardButton(self.Command.SELECT_TARGET_LANG),
            types.KeyboardButton(self.Command.SELECT_UI_LANG),
            types.KeyboardButton(self.Command.ADD_WORD),
            types.KeyboardButton(self.Command.NEXT)
        ]
        markup.add(*buttons)
        return markup

    # def select_lesson(self, message):
    #     cid = message.chat.id
    #
    #     with self.crud.Session() as session:
    #         lessons = session.query(Lesson).all()
    #
    #         if not lessons:
    #             self.bot.send_message(
    #                 cid,
    #                 "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.",
    #                 reply_markup=self.get_main_menu_markup()
    #             )
    #             return
    #
    #         markup = types.ReplyKeyboardMarkup(row_width=1)
    #         for lesson in lessons:
    #             markup.add(types.KeyboardButton(f"{lesson.id}: {lesson.title}"))
    #         markup.add(types.KeyboardButton(self.Command.MAIN_MENU))
    #
    #         self.bot.send_message(
    #             cid,
    #             "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:",
    #             reply_markup=markup
    #         )
    #         self.bot.set_state(message.from_user.id, self.MyStates.select_lesson, message.chat.id)

    def select_target_language(self, message):
        cid = message.chat.id
        markup = types.ReplyKeyboardMarkup(row_width=2)

        buttons = [
            types.KeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß"),
            types.KeyboardButton("–ö–∏—Ç–∞–π—Å–∫–∏–π üá®üá≥"),
            types.KeyboardButton(self.Command.MAIN_MENU)
        ]
        markup.add(*buttons)

        self.bot.send_message(
            cid,
            f"{self.lang.get_text('select_target_language')}",
            reply_markup=markup
        )
        self.bot.set_state(message.from_user.id, self.MyStates.select_target_language, message.chat.id)

    def select_ui_language(self, message):
        cid = message.chat.id
        markup = types.ReplyKeyboardMarkup(row_width=2)

        buttons = [
            types.KeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫"),
            types.KeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß"),
            types.KeyboardButton("–ö–∏—Ç–∞–π—Å–∫–∏–π üá®üá≥"),
            types.KeyboardButton(self.Command.MAIN_MENU)
        ]
        markup.add(*buttons)

        self.bot.send_message(
            cid,
            f"{self.lang.get_text('select_ui_language')}",
            reply_markup=markup
        )
        self.bot.set_state(message.from_user.id, self.MyStates.select_ui_language, message.chat.id)

    def add_word(self, message):
        cid = message.chat.id

        with self.crud.Session() as session:
            user = session.query(User).filter(User.telegram_id == str(cid)).first()

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_phrase_ids = [uw.phrase_id for uw in session.query(UserWord)
                .filter(UserWord.user_id == user.id).all()]

            phrase = session.query(Phrase) \
                .filter(~Phrase.id.in_(user_phrase_ids)) \
                .order_by(func.random()) \
                .first()

            if not phrase:
                self.bot.send_message(
                    cid,
                    f"{self.lang.get_text('all_words_added')}",
                    reply_markup=self.get_main_menu_markup()
                )
                return

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_word = UserWord(
                user_id=user.id,
                phrase_id=phrase.id,
                last_review=datetime.now(timezone.utc)
            )
            session.add(user_word)
            session.commit()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
            word = getattr(phrase, f"text_{user.ui_language}")
            self.bot.send_message(
                cid,
                f"{self.lang.get_text('new_word_added')} {word}",
                reply_markup=self.get_main_menu_markup()
            )

    def delete_word(self, message):
        cid = message.chat.id

        with self.bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            if 'phrase_id' not in data:
                self.bot.send_message(
                    cid,
                    f"{self.lang.get_text('word_not_found')}",
                    reply_markup=self.get_main_menu_markup()
                )
                return

            with self.crud.Session() as session:
                user = session.query(User).filter(User.telegram_id == str(cid)).first()
                session.query(UserWord) \
                    .filter(UserWord.user_id == user.id, UserWord.phrase_id == data['phrase_id']) \
                    .delete()
                session.commit()

                self.bot.send_message(
                    cid,
                    f"{self.lang.get_text('word_deleted')}",
                    reply_markup=self.get_main_menu_markup()
                )

    def handle_user_response(self, message):
        cid = message.chat.id
        user_id = message.from_user.id
        text = message.text

        current_state = self.bot.get_state(user_id, cid)
        # print(f"Current state: {current_state}")
        logger.debug(f"Current state: {current_state}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞
        if current_state == self.MyStates.select_lesson.name:
            if text == self.Command.MAIN_MENU:
                self.show_main_menu(message)
                return

            try:
                lesson_id = int(text.split(':')[0])
                with self.crud.Session() as session:
                    user = session.query(User).filter(User.telegram_id == str(cid)).first()
                    lesson = session.query(Lesson).filter(Lesson.id == lesson_id).first()

                    if lesson:
                        phrases = session.query(Phrase).filter(Phrase.lesson_id == lesson_id).all()
                        added = 0
                        for phrase in phrases:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ —Å–ª–æ–≤–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            exists = session.query(UserWord) \
                                .filter(UserWord.user_id == user.id, UserWord.phrase_id == phrase.id) \
                                .first()
                            if not exists:
                                user_word = UserWord(
                                    user_id=user.id,
                                    phrase_id=phrase.id,
                                    last_review=datetime.now(timezone.utc)
                                )
                                session.add(user_word)
                                added += 1

                        session.commit()
                        self.bot.send_message(
                            cid,
                            f"{self.lang.get_text('added_count')} {added} \
                                {self.lang.get_text('words_from_lesson')} '{lesson.title}'",
                            reply_markup=self.get_main_menu_markup()
                        )
                    else:
                        self.bot.send_message(
                            cid,
                            f"{self.lang.get_text('lesson_not_found')}",
                            reply_markup=self.get_main_menu_markup()
                        )
            except ValueError:
                self.bot.send_message(
                    cid,
                    f"{self.lang.get_text('select_lesson_from_list')}",
                    reply_markup=self.get_main_menu_markup()
                )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞
        elif current_state == self.MyStates.select_target_language.name:
            if text == self.Command.MAIN_MENU:
                self.show_main_menu(message)
                return

            lang_map = {
                "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß": "en",
                "–ö–∏—Ç–∞–π—Å–∫–∏–π üá®üá≥": "zh"
            }

            if text in lang_map:
                with self.crud.Session() as session:
                    user = session.query(User).filter(User.telegram_id == str(cid)).first()
                    user.target_language = lang_map[text]
                    session.commit()

                    self.bot.send_message(
                        cid,
                        f"{self.lang.get_text('now_learning')} {text}",
                        reply_markup=self.get_main_menu_markup()
                    )
            else:
                self.bot.send_message(
                    cid,
                    f"{self.lang.get_text('select_lesson_from_list')}",
                    reply_markup=self.get_main_menu_markup()
                )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        elif current_state == self.MyStates.select_ui_language.name:
            if text == self.Command.MAIN_MENU:
                self.show_main_menu(message)
                return

            lang_map = {
                "–†—É—Å—Å–∫–∏–π üá∑üá∫": "ru",
                "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß": "en",
                "–ö–∏—Ç–∞–π—Å–∫–∏–π üá®üá≥": "zh"
            }

            if text in lang_map:
                with self.crud.Session() as session:
                    user = session.query(User).filter(User.telegram_id == str(cid)).first()
                    user.ui_language = lang_map[text]
                    session.commit()

                    user_id = message.from_user.id
                    lang = self.get_user_lang(user_id)
                    self.ui_lang = lang
                    self.Command = self._init_commands()
                    self.show_main_menu(message)
                    self.bot.send_message(
                        cid,
                        f"–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {text}",
                        reply_markup=self.get_main_menu_markup()
                    )
            else:
                self.bot.send_message(
                    cid,
                    f"{self.lang.get_text('select_lesson_from_list')}",
                    reply_markup=self.get_main_menu_markup()
                )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
        if current_state != self.MyStates.learning_mode.name:
            self.show_main_menu(message)
            return
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        with self.bot.retrieve_data(user_id, cid) as data:
            if not data or 'phrase_id' not in data:
                logger.warning("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞")
                self._recreate_learning_card(user_id, cid)
                return

            target_word = data.get('target_word')
            if not target_word:
                self._recreate_learning_card(message, user_id, cid)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if text == target_word:
                self._handle_correct_answer(user_id, cid, data)
            else:
                self._handle_wrong_answer(user_id, cid, data)

    # -
    def _recreate_learning_card(self, message, user_id: int, chat_id: int):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        lang = self._get_user_lang_from_cache(user_id) or 'ru'
        self.bot.send_message(chat_id,
                              self.lang.get_text('session_restarted', lang=lang))
        self.create_learning_card(message, chat_id, user_id)

    def _handle_correct_answer(self, user_id: int, chat_id: int, data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        lang = self._get_user_lang_from_cache(user_id) or 'ru'

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        success, error = self.crud.update_user_word_progress(
            user_id=data['user_id'],
            phrase_id=data['phrase_id']
        )

        if error:
            logger.error(f"Failed to update progress: {error}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        hint = f"{self.lang.get_text('correct_answer', lang=lang)} ‚úÖ\n" \
               f"{data['target_word']} -> {data['translate_word']}"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        answer_buttons = self._generate_answer_options(
            data['target_word'],
            data['other_words']
        )
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É 1
        commands = self._init_commands(ui_lang=lang)
        action_buttons = [
            types.KeyboardButton(commands.NEXT),
            types.KeyboardButton(commands.DELETE_WORD),
            types.KeyboardButton(commands.MAIN_MENU)
        ]

        markup = self._create_learning_markup(
            # answer_buttons + action_buttons,
            action_buttons,
            row_width=2
        )

        self.bot.send_message(chat_id, hint, reply_markup=markup)

    def _handle_wrong_answer(self, user_id: int, chat_id: int, data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        lang = self._get_user_lang_from_cache(user_id) or 'ru'
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        hint = f"{self.lang.get_text('wrong_answer', lang=lang)} ‚ùå\n" \
               f"{data['translate_word']} -> {data['target_word']}"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É 2
        commands = self._init_commands(ui_lang=lang)
        action_buttons = [
            types.KeyboardButton(commands.NEXT),
            types.KeyboardButton(commands.ADD_WORD),
            types.KeyboardButton(commands.MAIN_MENU)
        ]

        markup = self._create_learning_markup(
            action_buttons,
            row_width=2
        )

        self.bot.send_message(chat_id, hint, reply_markup=markup)

    def _generate_answer_options(self, target_word: str, other_words: List[str]) -> List[types.KeyboardButton]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        buttons = [types.KeyboardButton(target_word)]
        buttons.extend([types.KeyboardButton(word) for word in other_words])
        random.shuffle(buttons)
        return buttons

    def get_user_lang(self, user_id):
        """–ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
        with self.crud.Session() as session:
            user = session.query(User).filter(User.telegram_id == str(user_id)).first()
            return user.ui_language if user else 'ru'

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _send_error_message(self, chat_id: int) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        lang = self._get_user_lang_from_cache(chat_id) or 'ru'
        error_msg = self.lang.get_text('error_occurred', lang=lang)
        try:
            self.bot.send_message(
                chat_id,
                error_msg,
                reply_markup=self._get_main_menu_markup(lang)
            )
        except Exception as e:
            logger.error(f"Failed to send error message: {str(e)}")

    def _get_user_lang_from_cache(self, user_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞"""
        return self.user_cache.get(user_id, {}).get('ui_language')

    def _get_main_menu_markup(self, lang: str) -> types.ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
        commands = self._init_commands(ui_lang=lang)
        markup = types.ReplyKeyboardMarkup(row_width=2)

        buttons = [
            types.KeyboardButton(commands.SELECT_LESSON),
            types.KeyboardButton(commands.SELECT_TARGET_LANG),
            types.KeyboardButton(commands.SELECT_UI_LANG),
            types.KeyboardButton(commands.ADD_WORD),
            types.KeyboardButton(commands.NEXT)
        ]

        markup.add(*buttons)
        return markup

    def _create_learning_markup_v3(self, target_word: str, other_words: List[str],
                                   lang: str) -> types.ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è"""
        markup = types.ReplyKeyboardMarkup(row_width=2)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        buttons = [types.KeyboardButton(target_word)]
        buttons.extend([types.KeyboardButton(word) for word in other_words])
        random.shuffle(buttons)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        commands = self._init_commands(ui_lang=lang)
        buttons.extend([
            types.KeyboardButton(commands.NEXT),
            types.KeyboardButton(commands.ADD_WORD),
            types.KeyboardButton(commands.DELETE_WORD),
            types.KeyboardButton(commands.MAIN_MENU)
        ])

        markup.add(*buttons)
        return markup

    def _create_learning_markup(self, buttons: List[types.KeyboardButton],
                                row_width: int = 2) -> types.ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫"""
        markup = types.ReplyKeyboardMarkup(row_width=row_width)
        markup.add(*buttons)
        return markup

    def _format_welcome_message(self, user: User, stats: Dict) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        lang = user.ui_language
        lines = [
            self.lang.get_text('bot_welcome_msg', lang=lang),
            "",
            f"{self.lang.get_text('user_dict_size', lang=lang)}: {stats.get('word_count', 0)}",
            f"{self.lang.get_text('learned_words', lang=lang)}: {stats.get('learned_words', 0)}",
            f"{self.lang.get_text('target_language', lang=lang)}: {user.target_language}"
        ]

        if user.current_lesson_id:
            lines.append(
                f"{self.lang.get_text('current_lesson', lang=lang)}: {stats.get('current_lesson_title', 'Unknown')}"
            )
        else:
            lines.append(self.lang.get_text('no_lesson_selected', lang=lang))

        return "\n".join(lines)

    def run(self):
        print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
        self.bot.infinity_polling(skip_pending=True)


if __name__ == '__main__':
    TOKEN = '***'
    DB_URL = 'postgresql://postgres:***@localhost/lfl'

    bot = LanguageBot(TOKEN, DB_URL)
    # bot.run()
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print(bot.start_bot())

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    print(bot.get_bot_status())

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
    # time.sleep(60)
    # print(bot.stop_bot())
